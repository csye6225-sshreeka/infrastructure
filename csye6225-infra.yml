
AWSTemplateFormatVersion: 2010-09-09

Description: VPC with public subnet
  
Parameters: 
  VpcCIDR: 
    Default: 10.0.0.0/16
    Description: Enter the IP range (CIDR notation) for VPC
    Type: String
  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: Enter the IP range (CIDR notation) for public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: Enter the IP range (CIDR notation) for public subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.2.0/24
    Description: Enter the IP range (CIDR notation) for public subnet 3
    Type: String
  
  #Private subnet1 
  PrivateSubnet1CIDR:
    Default: 10.0.6.0/24
    Description: Enter the IP range (CIDR notation) for private subnet 1
    Type: String

  #Private subnet2
  PrivateSubnet2CIDR:
    Default: 10.0.4.0/24
    Description: Enter the IP range (CIDR notation) for private subnet 2
    Type: String

  #Private subnet3
  PrivateSubnet3CIDR:
    Default: 10.0.5.0/24
    Description: Enter the IP range (CIDR notation) for private subnet 3
    Type: String

  AMIImage:
    Default: ami-0612a6d97b88bfd6d
    Type: String
    Description: Enter valid ami id

  ProfileName:
    Default: dev
    Type: String
    Description: Enter the profile that you want this to run on either dev or demo
  
  SecretKey:
    Default: AKIAX6SPJCQYNQQ6RHKC
    Type: String
    Description: Enter secret key
  
  AccessKey:
    Default: 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
    Type: String
    Description: Enter access key
  
  DNSName:
    Type: String
    Default: "demo.sshreeka.me."


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGW
  InternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref VPC

  myPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnet-1
      VpcId: !Ref VPC 

  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnet-2
      VpcId: !Ref VPC     

  myPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-subnet-3
      VpcId: !Ref VPC     

  #Private subnets

  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-subnet-1
      VpcId: !Ref VPC 

  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-subnet-2
      VpcId: !Ref VPC 

  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-subnet-3
      VpcId: !Ref VPC 


  # Private route

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-private
  

#Private subnet association 

  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
 
  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable


# Public route
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-routingTable
  
  myRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGateway
    Properties:
       RouteTableId: !Ref myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref myInternetGateway
      
      

  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet1
      RouteTableId: !Ref myRouteTable

  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet2
      RouteTableId: !Ref myRouteTable

  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet3
      RouteTableId: !Ref myRouteTable

  
  myapplicationSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myapplicationSecuritygroup
      GroupDescription: Allow http/Https and ssh to Ec2 
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        #SourceSecurityGroupId: !Ref myloadbalancerSecuritygroup
      - IpProtocol: tcp
        FromPort: 8083
        ToPort: 8083
       # CidrIp: 0.0.0.0/0
        SourceSecurityGroupId: !Ref myloadbalancerSecuritygroup
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: application

  #Database security group
  DatabaseSecurityGroup:
    DependsOn:
     - myPrivateSubnet1
     - myPrivateSubnet2
     - myPrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: database access
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref myapplicationSecuritygroup
      Tags:
      - Key: Name
        Value: database
      VpcId: !Ref VPC

  #S3 bucket creation 
  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: "ProfileName"
          - "sshreeka.me"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: Rule for S3 bucket
          Prefix: S3 images
          Status: Enabled
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA


#RDS parameter group 
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: My sql DB
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: mysqlRDSparameter

#RDS subnet      
  RdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for mySQL database
      SubnetIds: 
        - Ref: myPrivateSubnet1
        - Ref: myPrivateSubnet2
        - Ref: myPrivateSubnet3

#RDS MySQL instance
  MySqlDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye62251
      MasterUsername: csye6225
      MasterUserPassword: Shreekar_123
      Engine: mysql
      StorageEncrypted: true
      KmsKeyId: !Ref RDSKey
      EngineVersion : 8.0.28
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RdsDBSubnetGroup
      DBParameterGroupName: !Ref RDSDBParameterGroup
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: "20"
      #DBSecurityGroups: !Ref DatabaseSecurityGroup
      VPCSecurityGroups:
            - !GetAtt "DatabaseSecurityGroup.GroupId"
            - !Ref DatabaseSecurityGroup
      DBInstanceIdentifier: "csye62251"
      MultiAZ: False



  RootRole:

    Type: "AWS::IAM::Role"

    Properties:

      RoleName: "EC2-CSYE6225"

      # Policies:

      #   - Ref: RolePolicies

      AssumeRolePolicyDocument:

        Version: "2012-10-17"

        Statement:

          -

            Effect: "Allow"

            Principal:

              Service:

                - "ec2.amazonaws.com"

            Action:

              - "sts:AssumeRole"

      Path: "/"

  DemoInstanceProfile:

    Type: AWS::IAM::InstanceProfile

    Properties:

      InstanceProfileName: demo-ec2-instance-profile

      Path: /

      Roles:
       - !Ref CodeDeployEC2ServiceRole
  
  
  CodeDeployEC2ServiceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "CodeDeployEC2ServiceRole"
      # Policies:
      #   - Ref: RolePolicies
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"


  CodeDeployEC2S3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - 's3:PutObject'
              - 's3:Get*'
              - 's3:DeleteObject'
              - 's3:List*'
            Resource: 
               - arn:aws:s3:::assign7.demo/*
               - arn:aws:s3:::assign7.demo
            
      Roles:
        - Ref: CodeDeployEC2ServiceRole  



  CloudWatchAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "EC2CloudWatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
              - 'ssm:PutParameter'
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
        - Ref: CodeDeployEC2ServiceRole  

  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: csye6225
      RetentionInDays: 7

  RolePolicies:

    Type: 'AWS::IAM::Policy'

    Properties:

      PolicyName: WebAppS3

      PolicyDocument:

        Version: "2012-10-17"

        Statement:

          - Effect: Allow

            Action:

              - 's3:PutObject'

              - 's3:GetObject'

              - 's3:DeleteObject'

            Resource:

              -  !Sub arn:aws:s3:::${S3bucket}

              -  !Sub arn:aws:s3:::${S3bucket}/*

      Roles:

        - Ref: CodeDeployEC2ServiceRole


  ApplicationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-EC2-instance'
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 20
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
              KmsKeyId: !Ref EBSKey
              DeleteOnTermination: true
            DeviceName: /dev/xvda
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt [DemoInstanceProfile, Arn]
        KeyName: sshreeka
        ImageId: !Ref AMIImage
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups: 
              - !Ref myapplicationSecuritygroup

      # SecurityGroups:
      # - !Ref myapplicationSecuritygroup     
        UserData:
          Fn::Base64: 
            !Sub |
            #!/bin/bash
            echo export RDS="${MySqlDbInstance.Endpoint.Address}" >> /etc/profile
            echo export SQL_ROOT="csye6225" >> /etc/profile
            echo export SQL_PASS="Shreekar_123" >> /etc/profile
            echo export bucket="${S3bucket}" >> /etc/profile
            echo export DB="csye62251" >> /etc/profile
            echo export region="us-east-1" >> /etc/profile
            echo Environment=\"RDS=${MySqlDbInstance.Endpoint.Address}\" >> /tmp/app.service
            echo Environment=\"SQL_ROOT=csye6225\" >> /tmp/app.service
            echo Environment=\"SQL_PASS=Shreekar_123\" >> /tmp/app.service
            echo Environment=\"bucket=${S3bucket}\" >> /tmp/app.service
            echo Environment=\"region=us-east-1\" >> /tmp/app.service
            echo Environment=\"DB=csye62251\" >> /tmp/app.service
            sudo cp /tmp/app.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable app.service
            sudo systemctl start app.service
            sudo systemctl status app.service    
             
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '3'
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      #LaunchConfigurationName: !Ref LaunchConfig
      LaunchTemplate: 
        LaunchTemplateId: !Ref ApplicationLaunchTemplate
        Version: !GetAtt ApplicationLaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '1'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - Ref: myPublicSubnet1
        - Ref: myPublicSubnet2
        - Ref: myPublicSubnet3

 
  #loadbalanceSecuritygroup
  myloadbalancerSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: myloadbalancerSecuritygroup
      GroupDescription: Allow http/https access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: load balancer
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: myloadbalancerSecuritygroup
      Subnets:
        - Ref: myPublicSubnet1
        - Ref: myPublicSubnet2
        - Ref: myPublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
 
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '4'
      AlarmDescription: Alarm if CPU utilization more than 4%
      Period: '300'
      AlarmActions:
      - !Ref ScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '2'
      AlarmDescription: Alarm if CPU utilization is less than 2%
      Period: '300'
      AlarmActions:
      - !Ref ScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      Cooldown: 60
      ScalingAdjustment: 1
  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      Cooldown: 60
      ScalingAdjustment: -1
  loadBalancerTargetGroup:
    DependsOn: loadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: 8083
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8083
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443 #80
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:771822191110:certificate/b30dadcc-f63d-4166-99a9-c9fb37a72227
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
 
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref DNSName
      Comment: Zone apex alias targeted to LoadBalancer.
      RecordSets:
      - Name: !Ref DNSName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'loadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'loadBalancer.DNSName'

  GHUploadToS3:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "GHUploadToS3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: [ 
          {
            "Effect": "Allow", 
            "Action": [ 
                "s3:PutObject", 
                "s3:Get*", 
                "s3:List*" ,
                "s3:GetObjectVersion",
                "s3:Delete*"
            ], 
            "Resource": [ 
                "arn:aws:s3:::assign7.demo/*",
                "arn:aws:s3:::assign7.demo"
            ] 
          } 
        ]
      Users: 
        - "ghactions-app"

  GHCodeDeploy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "GHCodeDeploy"
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
          {
          "Effect": "Allow",
          "Action": [
          "codedeploy:RegisterApplicationRevision",
          "codedeploy:GetApplicationRevision"
          ],
          "Resource": [
            "arn:aws:codedeploy:us-east-1:771822191110:application:csye6225-webapp"
          ]
          },
          {
          "Effect": "Allow",
          "Action": [
          "codedeploy:CreateDeployment",
          "codedeploy:GetDeployment"
          ],
          "Resource": [
          "*"
          ]
          },
          {
          "Effect": "Allow",
          "Action": [
            "codedeploy:GetDeploymentConfig"
          ],
          "Resource": [
          "arn:aws:codedeploy:us-east-1:771822191110:deploymentconfig:CodeDeployDefault.OneAtATime",
          "arn:aws:codedeploy:us-east-1:771822191110:deploymentconfig:CodeDeployDefault.HalfAtATime",
          "arn:aws:codedeploy:us-east-1:771822191110:deploymentconfig:CodeDeployDefault.AllAtOnce"
          ]
          }
        ]
      Users: 
        - "ghactions-app"

  ghec2ami:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "GHEc2AMI"
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
          {
          "Effect": "Allow",
          "Action": [
          "ec2:AttachVolume",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CopyImage",
          "ec2:CreateImage",
          "ec2:CreateKeypair",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSnapshot",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteKeyPair",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSnapshot",
          "ec2:DeleteVolume",
          "ec2:DeregisterImage",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeRegions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DetachVolume",
          "ec2:GetPasswordData",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifySnapshotAttribute",
          "ec2:RegisterImage",
          "ec2:RunInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          
          ],
          "Resource": "*"
          }
        ]
      Users: 
        - "ghactions-app"

  CodeDeployServiceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "CodeDeployServiceRole"
      # Policies:
      #   - Ref: RolePolicies
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codedeploy.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployApp:
     Type: AWS::CodeDeploy::Application
     Properties:
      ApplicationName: "csye6225-webapp"
      ComputePlatform: "Server"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-codedeploy-app'

  CodeDeploymentGroup:
     Type: AWS::CodeDeploy::DeploymentGroup
     Properties:
      DeploymentGroupName: "csye6225-webapp-deployment"
      ApplicationName: "csye6225-webapp"
      DeploymentStyle:
        DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
        DeploymentType: "IN_PLACE"
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      ServiceRoleArn: !GetAtt "CodeDeployServiceRole.Arn"
      AutoScalingGroups:
        - !Ref asgWebApp
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - "DEPLOYMENT_FAILURE"
      Ec2TagFilters:
       - Key: "Name"
         Value: !Sub '${AWS::StackName}-asg'
         Type: "KEY_AND_VALUE"

  NotificationSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "MailNotification"
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LambdaFunction.Arn

  LambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
      Path: "/"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "csye6225-spring2022"
      MemorySize: 512
      Handler: "com.sshreeka.serverless.serverless.EmailNotification::handleRequest"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: sshreeka-serverless
        S3Key: "serverless-1.0.0.jar"
      Runtime: "java11"
      Timeout: 59

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationSNS
      FunctionName: !GetAtt LambdaFunction.Arn

  TokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "emailID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "emailID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "TokenTable"

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "emailID"
          AttributeType: "S"
        # - AttributeName: "Token"
        #   AttributeType: "N"
      ProvisionedThroughput:
        ReadCapacityUnits: "7"
        WriteCapacityUnits: "7"
      KeySchema:
        - AttributeName: "emailID"
          KeyType: "HASH"
        # - AttributeName: "Token"
        #   KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      TableName: "UsernameTokenTable"

  DynamoDBPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: DynamoDBPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:DescribeTable'
                - 'dynamodb:Get*'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:Delete*'
                - 'dynamodb:CreateTable'
                - 'dynamodb:Update*'
                - 'dynamodb:BatchWrite*'
                - 'dynamodb:DescribeStream'
                - 'dynamodb:BatchGet*'
                - 'dynamodb:List*'
                - 'dynamodb:DescribeReservedCapacity*'
                - 'dynamodb:DescribeLimits'
                - 'dynamodb:DescribeTimeToLive'
              Resource:
                - !GetAtt DynamoDB.Arn
        Roles:
          - !Ref CodeDeployEC2ServiceRole

  EC2SNSPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: EC2SNSPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sns:*
                - sns:Publish
                - sns:GetTopicAttributes
                - sns:ListTopics
                - sns:CreateTopic
              Resource:
                - "*"
        Roles:
          - !Ref CodeDeployEC2ServiceRole

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaCloudWatchPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:CreateLogStream

            Resource:
              - arn:aws:logs:us-east-1:771822191110:*
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource:
              - "arn:aws:ses:us-east-1:771822191110:identity/demo.sshreeka.me"
      Roles:
        - !Ref LambdaExecutionRole

  CodeDeployEC2S3Lam:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "CodeDeploy-EC2-S3-lamb"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - "arn:aws:s3:::sshreeka-serverless"
              - "arn:aws:s3:::sshreeka-serverless/*"
      Users:
        - "ghactions-app-lambda"

          
  GHUploadToS3LamB:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "GH-Upload-To-S3-lam"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObjectAcl
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - "arn:aws:s3:::sshreeka-serverless"
              - "arn:aws:s3:::sshreeka-serverless/*"
      Users:
        - "ghactions-app-lambda"

  GHCodeDeployLamda:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "GH-Code-Deploy-lam"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - codedeploy:RegisterApplicationRevision
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
            Resource:
              - "arn:aws:codedeploy:us-east-1:771822191110:application:csye6225-webapp"
          - Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetDeployment
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - codedeploy:GetDeploymentConfig
            Resource:
              - 'arn:aws:codedeploy:us-east-1:771822191110:deploymentconfig:CodeDeployDefault.OneAtATime'
              - 'arn:aws:codedeploy:us-east-1:771822191110:deploymentconfig:CodeDeployDefault.HalfAtATime'
              - 'arn:aws:codedeploy:us-east-1:771822191110:deploymentconfig:CodeDeployDefault.AllAtOnce'
      Users:
        - "ghactions-app-lambda"

  LambdaUpdate:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:UpdateFunctionCode'
            Resource:
              - 'arn:aws:lambda:us-east-1:771822191110:function:csye6225-spring2022'
      PolicyName: Github-Lambda-Updates
      Users:
        - ghactions-app-lambda

  RDSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: An example symmetric KMS key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Id: sym-ebs-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::771822191110:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::771822191110:root'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::771822191110:root'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  RDSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/rdsKey
      TargetKeyId:
        Ref: RDSKey

  EBSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: An example symmetric KMS key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Id: sym-ebs-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 
                - !Sub arn:aws:iam::771822191110:root
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::771822191110:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::771822191110:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  EBSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ebsKey
      TargetKeyId:
        Ref: EBSKey